#!/usr/local/bin/bash

# Licensed under the 3-clause BSD license:
# 
# Copyright (c) 2016, J. Lustig
# All rights reserved.
# 
# Redistribution and use in source and binary forms, with or without modification,
# are permitted provided that the following conditions are met:
# 
#   1. Redistributions of source code must retain the above copyright notice, 
#      this list of conditions and the following disclaimer.
#   2. Redistributions in binary form must reproduce the above copyright notice,
#      this list of conditions and the following disclaimer in the documentation
#      and/or other materials provided with the distribution.
#   3. Neither the name of the copyright holder nor the names of its contributors
#      may be used to endorse or promote products derived from this software
#      without specific prior written permission.
# 
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
# AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
# IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
# ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
# LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
# CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE
# GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
# CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
# OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
# OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

cwd=$(pwd)
FOLDERSTRING=`tag -f 'photos oriented' .`
#FOLDERSTRING=`tag -f 'test' .`
FOLDERS=()

# If the user specifies an output directory, then files will be saved there
# -- otherwise it will try to save to Dropbox
 
outDirectory="$1"
if [[ $outDirectory == "" ]]
then
	username=$(whoami)
	outDirectory="/Users/$username/Dropbox/pdfs"
fi

if [[ ! -d $outDirectory ]]; then
	echo "${outDirectory} is not a folder. Please specify a folder to deposit the finished PDFs."
	echo ""

	exit 1
fi

if [ -d "$outDirectory" ]; then

	echo "Saving PDFs to ${outDirectory}"

    # Will enter here if $DIRECTORY exists, even if it contains spaces
	# put it into an array
	while read -r line; do FOLDERS=("${FOLDERS[@]}" "$line"); done <<< "$FOLDERSTRING";

	# go through each item in the array
	for i in "${FOLDERS[@]}"
	do
		tags=$(tag -l --no-name "${i}")
		folderName=$(basename "${i}")
		# find out if the current item has been PDF'd already
		isPDFed=0
		if [[ $tags == *"pdf made"* ]]
		then
	  		isPDFed=1;
		fi
		echo "FOLDER: ${folderName}";
		echo "FULL PATH: ${i}";
		echo "CURRENT TAGS: ${tags}"
		if (($isPDFed == 0)); then
			echo "NOT PDF'D!!"
			
			# Using IMAGEMAGICK
			# nice -n 5 convert "${i}/*.JPG" -compress JPEG "${outDirectory}/${folderName}.pdf"
			
			# Using GRAPHICSMAGICK
			
			# 0) Set up folder
			mv "$i" temp
			
			# I DON'T ACTUALLY DO THIS
			# 1) rotate all images 360 degrees (bc there is sometimes an issue with graphicsmagick & MacOS Preview)
			# parallel gm convert -rotate 360 {} {} ::: temp/*.JPG
			# sips -r 180 temp/*.JPG # /dev/null # don't print out lots of stuff
			# sips -r 180 temp/*.JPG # /dev/null # don't print out lots of stuff
			# (i tried to do this programmatically --> but it didn't really do anything. I had to make an Automator workflow which would do this if necessary.)
			
			
			# 2) convert Jpegs to Jpeg-2000
			# GRAY --> makes files 1/2 the size
			parallel gm convert -colorspace GRAY -define 'jp2:rate=0.012' {} {}.jp2 ::: temp/*.JPG
			# COLOR
			# parallel gm convert -define 'jp2:rate=0.008' {} {}.jp2 ::: temp/*.JPG
			
			# 3) convert new files to PDFs
			# this (outdated) version uses graphicsmagick.... 
			# nice -n 5 m convert -verbose "${i}/*.jp2" "${outDirectory}/${folderName}.pdf"
			# this (BETTER) version uses img2pdf (`pip3 install img2pdf`)
			img2pdf temp/*.jp2 -o "${outDirectory}/${folderName}.pdf"
			
			# 4) clear out the temp files
			rm temp/*.jp2
			# rm "{$i}/*.jp2"
			mv temp "$i"
			
			# 5) add tags to the folder marking it as pdf'd
			tag --add "pdf made" "${i}"
			tags=$(tag -l --no-name "${i}")
			
			echo "UPDATED TAGS: ${tags}"
		else
			echo "PDF'D!!! This file is DONE"
		fi
		echo ""
	
		# ways to output pdfs:
		# (0) Adobe acrobat [146.1 MB --> 25 MB on OCR]
		# (1) convert *.JPG -verbose -compress JPEG out-compress-jpeg.pdf [123.7 MB --> 25.7 MB on OCR]
		# (2) convert without compression [non-starter]
		# (3) pdftk??
	done

else
	echo "The output directory ${outDirectory} doesn't exist, cannot process files. You can run make-pdfs PATH-TO-A-DIRECTORY-OF-YOUR-CHOICE to save to a specific folder, or please create the folder ${outDirectory}"
fi
